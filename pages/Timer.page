<apex:page controller="TimerController" standardStylesheets="false" showHeader="false" sidebar="false">
    <!-- Compiled and minified CSS -->


    <head>
        <!--Import Google Icon Font-->
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
        <!--Import materialize.css-->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/css/materialize.min.css" />

        <!--Let browser know website is optimized for mobile-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <style>
            html {
                height: 100vh;
            }
            
            body {
                min-height: 100vh;
            }
            
            .left {
                float: left;
            }
            
            .right {
                float: right;
            }
            
            .bottom {
                float: right;
            }
            .colorTeal{
                color:#26a69a;
            }
            .padB25{
                padding-bottom:25px;
            }
        </style>
    </head>

    <body class="grey lighten-2">
        <div class="container grey lighten-2">
            <br /><br />
            <!-- Page Content goes here -->
            <div class="row">

                <div class="col s12">
                    <!-- Teal page content  -->
                    <div class="card white">
                        <apex:form rendered="true">
                            <div class="card-content black-text">
                                <span class="card-title padB25">Hi {!$User.FirstName}!</span>
                                <br />
                                
                                <label>Select Project</label>
                                <span class="name hide">{!pros}</span>
                                <div class="" style="">
                                    <select style="display:inline;">
                                    </select>
                                </div>
                            </div>
                            <div class="card-action" style="min-height:90px;text-align:center;">
                                    <span class="time" style="font-size:2rem;"></span>
                                    <br />
                                <div style="">
                                    <a class="waves-effect waves-light btn-large matchWidth start" href="#">Start</a> &nbsp;
                                    <a class="waves-effect waves-light btn-large matchWidth stop" style="display:none" href="#">Stop</a>
                                </div>
                            </div>
                        </apex:form>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col s12">
                    <!-- page content  -->
                    <div class="projCard card white">
                        <div class="card-content black-text ">
                            <span class="card-title">Projects</span>
                            
                            <a class="colorTeal waves-effect waves-light right weekToggle"><i class="material-icons right" >restore</i></a>
                            <br />
                            
                            <div id="thisWeek" class="projToToggle projectList " style="display:none">
                                <h3 style="font-weight:300;font-size:1.5rem;">This Week</h3>
                                <hr />
                                
                                <p class="newProjects"></p>
                                
                                <apex:repeat var="p" value="{!projects}">
                                    <apex:outputPanel rendered="{!IF(p.Time_in_Seconds__c != null, true, false)}">
                                        <b class="dayThisWeek">{!p.Day_of_Week__c}<br/></b> 
                                        {!p.Name__c}<br/>
                                        <li>{!p.Time__c}</li>
                                    </apex:outputPanel>
                                </apex:repeat>
                            </div>

                            <div id="lastWeek" class="projToToggle" style="display:none">
                                <h3 style="font-weight:300;font-size:1.5rem;">Last Week</h3>
                                <hr />
                                <apex:repeat var="p" value="{!projectsLastWeek}">
                                    <apex:outputPanel rendered="{!IF(p.Time_in_Seconds__c != null, true, false) && IF(hasLastWeek,true,false)}">
                                        <b>{!p.Day_of_Week__c}</b><br/> 
                                        {!p.Name__c}<br/>
                                        <li>{!p.Time__c}</li>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!IF((!hasLastWeek),true,false)}">
                                        <i style="alignment:center;">(No Last Week Data)</i>
                                    </apex:outputPanel>
                                </apex:repeat>
                            </div>

                            <div id="newProject" class="projToToggle" style="display:none">
                                <h3 style="font-weight:300;font-size:1.5rem;">Name of New Project</h3>
                                <input class="projectInput" type="text" />
                                <apex:form >
                                    <a class="waves-effect waves-light btn-large addProj" style="margin-right:0px" href="#">Add Project</a>
                                </apex:form>
                            </div>

                            <div id="delProjects" class="projToToggle" style="display:none">
                                <h3 style="font-weight:300;font-size:1.5rem;">Delete Old Projects</h3>
                                <i>Long press (or long click) to remove</i>
                                <hr />
                                <ul class="toDelFrom" style="font-size:1.5rem;">
                                </ul>
                            </div>

                            <a class="colorTeal waves-effect waves-light right delProject" ><i style="vertical-align: top;" class="material-icons right" >delete</i></a>
                            <br />

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <a style="margin-right:15px; margin-bottom:15px;" class="btn-floating btn-large waves-effect waves-light red right toggleProject"><i class="material-icons">add</i></a>
        
        
        <!--Import jQuery before materialize.js-->
        <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
		<!--<script src="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js"></script>
        <script>
            /*! timer.jquery 0.6.0 2016-06-09*/ ! function(a) {
                function b(d) {
                    if (c[d]) return c[d].exports;
                    var e = c[d] = {
                        exports: {},
                        id: d,
                        loaded: !1
                    };
                    return a[d].call(e.exports, e, e.exports, b), e.loaded = !0, e.exports
                }
                var c = {};
                return b.m = a, b.c = c, b.p = "", b(0)
            }([function(a, b, c) {
                "use strict";

                function d(a) {
                    return a && a.__esModule ? a : {
                        "default": a
                    }
                }
                var e = c(1),
                    f = d(e),
                    g = c(2),
                    h = d(g);
                ! function() {
                    $.fn.timer = function(a) {
                        return a = a || "start", this.each(function() {
                            $.data(this, h["default"].PLUGIN_NAME) instanceof f["default"] || $.data(this, h["default"].PLUGIN_NAME, new f["default"](this, a));
                            var b = $.data(this, h["default"].PLUGIN_NAME);
                            "string" == typeof a ? "function" == typeof b[a] && b[a]() : b.start()
                        })
                    }
                }()
            }, function(a, b, c) {
                "use strict";

                function d(a) {
                    return a && a.__esModule ? a : {
                        "default": a
                    }
                }

                function e(a, b) {
                    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function")
                }
                Object.defineProperty(b, "__esModule", {
                    value: !0
                });
                var f = function() {
                        function a(a, b) {
                            for (var c = 0; c < b.length; c++) {
                                var d = b[c];
                                d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d)
                            }
                        }
                        return function(b, c, d) {
                            return c && a(b.prototype, c), d && a(b, d), b
                        }
                    }(),
                    g = c(2),
                    h = d(g),
                    i = c(3),
                    j = d(i),
                    k = function() {
                        function a(b, c) {
                            if (e(this, a), this.element = b, this.originalConfig = Object.assign({}, c), this.totalSeconds = 0, this.intervalId = null, this.html = "html", "INPUT" !== b.tagName && "TEXTAREA" !== b.tagName || (this.html = "val"), this.config = j["default"].getDefaultConfig(), c && "string" != typeof c && (c.duration && (c.duration = j["default"].durationTimeToSeconds(c.duration)), this.config = Object.assign(this.config, c), this.config.seconds && (this.totalSeconds = this.config.seconds), this.config.editable && j["default"].makeEditable(this), this.startTime = j["default"].unixSeconds() - this.totalSeconds, this.config.duration && this.config.repeat && this.config.updateFrequency < 1e3 && (this.config.updateFrequency = 1e3), this.config.countdown)) {
                                if (!this.config.duration) throw new Error("Countdown option set without duration!");
                                if (this.config.editable) throw new Error("Cannot set editable on a countdown timer!");
                                this.config.startTime = j["default"].unixSeconds() - this.config.duration, this.totalSeconds = this.config.duration
                            }
                        }
                        return f(a, [{
                            key: "start",
                            value: function() {
                                this.state !== h["default"].TIMER_RUNNING && (j["default"].setState(this, h["default"].TIMER_RUNNING), this.render(), this.intervalId = setInterval(j["default"].intervalHandler.bind(null, this), this.config.updateFrequency))
                            }
                        }, {
                            key: "pause",
                            value: function() {
                                this.state === h["default"].TIMER_RUNNING && (j["default"].setState(this, h["default"].TIMER_PAUSED), clearInterval(this.intervalId))
                            }
                        }, {
                            key: "resume",
                            value: function() {
                                this.state === h["default"].TIMER_PAUSED && (j["default"].setState(this, h["default"].TIMER_RUNNING), this.config.countdown ? this.startTime = j["default"].unixSeconds() - this.config.duration + this.totalSeconds : this.startTime = j["default"].unixSeconds() - this.totalSeconds, this.intervalId = setInterval(j["default"].intervalHandler.bind(null, this), this.config.updateFrequency))
                            }
                        }, {
                            key: "remove",
                            value: function() {
                                clearInterval(this.intervalId), $(this.element).data(h["default"].PLUGIN_NAME, null)
                            }
                        }, {
                            key: "reset",
                            value: function() {
                                var a = this.element,
                                    b = this.originalConfig;
                                this.remove(), $(a).timer(b)
                            }
                        }, {
                            key: "render",
                            value: function() {
                                this.config.format ? $(this.element)[this.html](j["default"].secondsToFormattedTime(this.totalSeconds, this.config.format)) : $(this.element)[this.html](j["default"].secondsToPrettyTime(this.totalSeconds)), $(this.element).data("seconds", this.totalSeconds)
                            }
                        }]), a
                    }();
                b["default"] = k
            }, function(a, b) {
                "use strict";
                Object.defineProperty(b, "__esModule", {
                    value: !0
                });
                var c = {
                    PLUGIN_NAME: "timer",
                    TIMER_RUNNING: "running",
                    TIMER_PAUSED: "paused",
                    DAYINSECONDS: 86400,
                    THIRTYSIXHUNDRED: 3600,
                    SIXTY: 60,
                    TEN: 10
                };
                b["default"] = c
            }, function(a, b, c) {
                "use strict";

                function d(a) {
                    return a && a.__esModule ? a : {
                        "default": a
                    }
                }
                Object.defineProperty(b, "__esModule", {
                    value: !0
                });
                var e = c(2),
                    f = d(e),
                    g = function() {
                        var a = arguments.length <= 0 || void 0 === arguments[0] ? 0 : arguments[0],
                            b = 0,
                            c = 0,
                            d = Math.floor(a / f["default"].SIXTY),
                            e = d,
                            g = void 0;
                        return a >= f["default"].DAYINSECONDS && (b = Math.floor(a / f["default"].DAYINSECONDS)), a >= f["default"].THIRTYSIXHUNDRED && (c = Math.floor(a % f["default"].DAYINSECONDS / f["default"].THIRTYSIXHUNDRED)), a >= f["default"].SIXTY && (e = Math.floor(a % f["default"].THIRTYSIXHUNDRED / f["default"].SIXTY)), g = a % f["default"].SIXTY, {
                            days: b,
                            hours: c,
                            minutes: e,
                            totalMinutes: d,
                            seconds: g,
                            totalSeconds: a
                        }
                    },
                    h = function(a) {
                        return a = parseInt(a, 10), 10 > a ? "0" + a : a
                    },
                    i = function() {
                        return {
                            seconds: 0,
                            editable: !1,
                            duration: null,
                            callback: function() {
                                console.log("Time up!")
                            },
                            repeat: !1,
                            countdown: !1,
                            format: null,
                            updateFrequency: 500
                        }
                    },
                    j = function() {
                        return Math.round(Date.now() / 1e3)
                    },
                    k = function(a) {
                        var b = g(a);
                        if (b.days) return b.days + ":" + h(b.hours) + ":" + h(b.minutes) + ":" + h(b.seconds);
                        if (b.hours) return b.hours + ":" + h(b.minutes) + ":" + h(b.seconds);
                        var c = "";
                        return c = b.minutes ? b.minutes + ":" + h(b.seconds) + " min" : b.seconds + " sec"
                    },
                    l = function(a, b) {
                        var c = g(a),
                            d = [{
                                identifier: "%d",
                                value: c.days
                            }, {
                                identifier: "%h",
                                value: c.hours
                            }, {
                                identifier: "%m",
                                value: c.minutes
                            }, {
                                identifier: "%s",
                                value: c.seconds
                            }, {
                                identifier: "%g",
                                value: c.totalMinutes
                            }, {
                                identifier: "%t",
                                value: c.totalSeconds
                            }, {
                                identifier: "%D",
                                value: h(c.days)
                            }, {
                                identifier: "%H",
                                value: h(c.hours)
                            }, {
                                identifier: "%M",
                                value: h(c.minutes)
                            }, {
                                identifier: "%S",
                                value: h(c.seconds)
                            }, {
                                identifier: "%G",
                                value: h(c.totalMinutes)
                            }, {
                                identifier: "%T",
                                value: h(c.totalSeconds)
                            }];
                        return d.forEach(function(a) {
                            b = b.replace(a.identifier, a.value)
                        }), b
                    },
                    m = function(a) {
                        if (!a) throw new Error("durationTimeToSeconds expects a string argument!");
                        if (!isNaN(Number(a))) return a;
                        a = a.toLowerCase();
                        var b = a.match(/\d{1,2}d/),
                            c = a.match(/\d{1,2}h/),
                            d = a.match(/\d{1,2}m/),
                            e = a.match(/\d{1,2}s/);
                        if (!(b || c || d || e)) throw new Error("Invalid string passed in durationTimeToSeconds!");
                        var g = 0;
                        return b && (g += Number(b[0].replace("d", "") * f["default"].DAYINSECONDS)), c && (g += Number(c[0].replace("h", "") * f["default"].THIRTYSIXHUNDRED)), d && (g += Number(d[0].replace("m", "")) * f["default"].SIXTY), e && (g += Number(e[0].replace("s", ""))), g
                    },
                    n = function(a) {
                        var b = void 0,
                            c = void 0;
                        return a.indexOf("sec") > 0 ? c = Number(a.replace(/\ssec/g, "")) : a.indexOf("min") > 0 ? (a = a.replace(/\smin/g, ""), b = a.split(":"), c = Number(b[0] * f["default"].SIXTY) + Number(b[1])) : a.match(/\d{1,2}:\d{2}:\d{2}:\d{2}/) ? (b = a.split(":"), c = Number(b[0] * f["default"].DAYINSECONDS) + Number(b[1] * f["default"].THIRTYSIXHUNDRED) + Number(b[2] * f["default"].SIXTY) + Number(b[3])) : a.match(/\d{1,2}:\d{2}:\d{2}/) && (b = a.split(":"), c = Number(b[0] * f["default"].THIRTYSIXHUNDRED) + Number(b[1] * f["default"].SIXTY) + Number(b[2])), c
                    },
                    o = function(a, b) {
                        a.state = b, $(a.element).data("state", b)
                    },
                    p = function(a) {
                        $(a.element).on("focus", function() {
                            a.pause()
                        }), $(a.element).on("blur", function() {
                            a.totalSeconds = n($(a.element)[a.html]()), a.resume()
                        })
                    },
                    q = function(a) {
                        return a.totalSeconds = j() - a.startTime, a.config.countdown ? (a.totalSeconds = a.config.duration - a.totalSeconds, 0 === a.totalSeconds && (clearInterval(a.intervalId), o(a, f["default"].TIMER_STOPPED), a.config.callback(), $(a.element).data("seconds")), void a.render()) : (a.render(), void(a.config.duration && a.totalSeconds > 0 && a.totalSeconds % a.config.duration === 0 && (a.config.callback && a.config.callback(), a.config.repeat || (clearInterval(a.intervalId), o(a, f["default"].TIMER_STOPPED), a.config.duration = null))))
                    };
                b["default"] = {
                    getDefaultConfig: i,
                    unixSeconds: j,
                    secondsToPrettyTime: k,
                    secondsToFormattedTime: l,
                    durationTimeToSeconds: m,
                    prettyTimeToSeconds: n,
                    setState: o,
                    makeEditable: p,
                    intervalHandler: q
                }
            }]);
        </script>

        <script>
            var selProjName;
            
            $(".hide").hide();
            $(".projectList").show();
            var lstWeekText = $('#lastWeek').text();
            if(lstWeekText == 'Last Week'){
                $('#lastWeek').text('(No Last Week Data)');
            }
            
            // del day name dups
            var dayBin = '';
            $('.dayThisWeek').each(function() {
                
                if(dayBin == $(this).text()) {
                    $(this).remove();
                }
                
                dayBin = $(this).text();
            });
            
            $(".start").click(function() {

                if ($(this).hasClass('started')) {
                    console.log('has started');
                    $(".time").timer('resume');

                    $('.stop').removeClass('submit');
                    $('.stop').text('Pause');
                }
                else {

                    $(".time").timer({
                        format: '%h:%M:%S'
                    });

                    $(".stop").show();
                    $(".stop").text('Pause');
                    $(this).addClass('started');
                }
            });

            $(".stop").click(function() {
                if ($(this).hasClass('submit')) {
                    console.log('has submit! - so submitting');
                    var timeInSec = $(".time").data('seconds');
                    var project = selProjName;
                    console.log('time in seconds = ' + time);
                    console.log('project selected = ' + project);
                    pushTime(timeInSec, project);
                }
                else {
                    var time = $(".time").data('seconds');
                    console.log('time in seconds = ' + time);
                    $(".time").timer('pause');
                    $('.start').text('Resume');
                    $(this).text('Submit');
                    $(this).addClass('submit');
                }
            });

            $("select").on('change', function() {
                var tester = $(this).val();
                console.log('sel = ' + tester);
                selProjName = tester;
            });

            $(document).ready(function() {
                var data = $('.name').text();
                var arr = data.split(', ');
                $.each(arr, function(key, text) {
                    
                    $('select').append($('<option>', { text }));
                    $('.toDelFrom').append($('<li>', { text }));
                });
                
                $('ul.toDelFrom > li').each(function() {
                    $(this).after( "<br />" );
                });

            });
            
            $(function(){
                $('.weekToggle').click(function() {
                    if($('#lastWeek').is(":visible")) {
                        $('.projToToggle').hide();
                        $('#thisWeek').show();
                    } else {
                        $('.projToToggle').hide();
                        $('#lastWeek').show();
                    }
                });
                
                $('a.toggleProject').click(function() {
                    if($('#newProject').is(":visible")) {
                        $('.projToToggle').hide();
                        $('#thisWeek').show();
                    } else {
                        $('.projToToggle').hide();
                        $('#newProject').show();
                    }
                });
                
                $('a.delProject').click(function() {
                    if($('#delProjects').is(":visible")) {
                        $('.projToToggle').hide();
                        $('#thisWeek').show();
                    } else {
                        $('.projToToggle').hide();
                        $('#delProjects').show();
                    }
                });
                
                $('.dayThisWeek').each(function() {
                    $(this).before( "<br />" );
                });
                
                $('option:first-of-type' ).addClass( "fotOption" );
                
				/*$('ul.toDelFrom > li').on( "swipe", function( event ) { 
                    delName = $(this).text();
                    console.log('Will DEL ' + delName); 
				});*/
            });

            function pushTime(timeInSec, project) {
                
                var timed = timeInSec;
                var name = project;
                console.log("hello accountId " + name);
                // This remoting call will use the page's timeout value
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.TimerController.pushTime}',
                    timed,
                    name,
                    handleResult
                );
            }

            function handleResult(result, event) {

                //<b>name</b><br/><li>time</li>
                //$('.newProjects').append($('<b>', {projectInserted.Name__c}));
                $('.newProjects').text(result);

                console.log("hello from handleResult " + result);

            }

            $('.addProj').click(function() {

                var projName = $('.projectInput').val();
                console.log('projName ' + projName);
                pushName(projName);
            });

            function pushName(projName) {

                var name = projName;
                console.log("hello, pushing name " + name);
                // This remoting call will use the page's timeout value
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.TimerController.pushName}',
                    name,
                    handleNameResult
                );
            }

            function handleNameResult(result, event) {

                //<b>name</b><br/><li>time</li>
                //$('.newProjects').append($('<b>', {projectInserted.Name__c}));
                $('.projToToggle').hide();
                $('#thisWeek').show();
                $( ".fotOption" ).before( "<option>" + result + "</option>" );
                $('.newProjects').text(result + ' was added to your list...');

                console.log("hello from handleResult " + result);

            }
            
            $('ul.toDelFrom > li').each(function(){
            	$(this).addClass('delLines');
            });
            
            $(function(){
				var timeoutId = 0;
				var delName;
        
				$('ul.toDelFrom > li').mousedown(function() {
					delName = $(this).text();
				    timeoutId = setTimeout(delLines, 1000);
				}).bind('mouseup mouseleave', function() {
				    clearTimeout(timeoutId);
				});
				  
				function delLines(){
					var name = delName;
					var oldProjs = $('.name').text();
					
					if (confirm('Are you sure you want to DELETE the ' + name + ' Project?')) {
							var projs = oldProjs.replace(name + ', ','');
							$('.delLines').text(name);
							console.log("hello, deleted " + name + ' from array '+ projs +' - deleting from DB now...');
							
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.TimerController.delName}',
							projs,
							handleDelResult
						);
					} else {
						console.log('Arrg... de perject gets ta fight \'nother day');
					}
					    
				}
			});
			
			function handleDelResult(result, event) {

				// re-pop the select and delete areas
				$('.projToToggle').hide();
				$('#thisWeek').show();
				var data = result;
				console.log('data =' + data);
                var arr = data.split(', ');
                
				console.log('arr =' + arr);
                $('select').html('');
                $('.toDelFrom').html('');
                
                $.each(arr, function(key, text) {
				console.log('key, text ='+ key +', '+ text);
	                $('select').append($('<option>', { text }));
                    if(text != '(Nothing Selected)'){
	                    $('.toDelFrom').append($('<li>', { text }));
                    }
                });
                
                $('ul.toDelFrom > li').each(function() {
                    $(this).after( "<br />" );
                });
                
				//$('.newProjects').text(result + ' is your new list...');

				console.log("Del is done");

			}
        </script>
    </body>

</apex:page>

<!--

    <span class="hide name">{!pros}</span>
    <select style="display:inline">
        <option>asdfadfasdfadfa</option>
    </select>
    <br />
    
    
    /*var data = $('#name').text();
    var arr = data.split(',');

    $.each(arr, function(key, text) {
        $('select').append($('<option>', {
            text
        }));
    });*/
    
    
    

                /*var data = $('.name').text();
                var arr = data.split(', ');
                console.log('test data ' + data);
                $.each(arr, function(key, text) {
                    console.log('testEach ' + text + key);
					$('.toDelFrom').append($('<li>', { text }));
				});*/
				
				/*$('ul.toDelFrom > li').each(function() {
					$(this).after( "<br />" );
                });*/
                
                
                
			
			/*$(function(){
				var timeoutId = 0;
				var delName;
				$('.delLines').mousedown(function() {
					delName = $(this).text();
				    timeoutId = setTimeout(delLines, 1000);
				}).bind('mouseup mouseleave', function() {
				    clearTimeout(timeoutId);
				});
			
			
				function delLines(){
					var name = delName;
					if (confirm('Are you sure you want to DELETE the ' + name + ' Project?')) {
						
						console.log("hello, deleted " + name + ' from array - deleting from DB now...');
						
						var names = $('.name').text();
						names.replace(name + ', ','');
						
						// This remoting call will use the page's timeout value
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.TimerController.removeName}',
							name,
							handleNameRemoveResult
						);
					} else {
						
					}
					
				}
			});*/
                
-->